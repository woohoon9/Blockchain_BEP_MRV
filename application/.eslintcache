[{"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/index.js":"1","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/App.js":"2","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/components/GlobalStyles.js":"3","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/routes.js":"4","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/theme/index.js":"5","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/theme/typography.js":"6","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/theme/shadows.js":"7","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/DashboardLayout/index.js":"8","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/DashboardLayout/TopBar.js":"9","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/DashboardLayout/NavBar/index.js":"10","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/DashboardLayout/NavBar/NavItem.js":"11","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/errors/NotFoundView.js":"12","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/MainLayout/index.js":"13","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/MainLayout/TopBar.js":"14","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/components/Logo.js":"15","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/components/Page.js":"16","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/icons/Facebook.js":"17","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/icons/Google.js":"18","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/utils/getInitials.js":"19","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/mixins/chartjs.js":"20","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/serviceWorker.js":"21","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/index.js":"22","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/BuildingInformation.js":"23","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/utils/hlfutils.js":"24","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/index.js":"25","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/index.js":"26","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/CarbonAuditorsInformation.js":"27","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/EnergyAuditorsInformation.js":"28","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/BaselineModel.js":"29","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/Measurement.js":"30","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/ElectricityMain.js":"31","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/NaturalGasMain.js":"32","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/ChilledWaterMain.js":"33","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/SteamMain.js":"34","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/Data.js":"35","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/data.js":"36","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/Results.js":"37","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/Toolbar.js":"38","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/Results.js":"39","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/Toolbar.js":"40","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/data.js":"41","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/ElectricityData.js":"42","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/VerificationStatus.js":"43","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/auth/LoginView.js":"44","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/auth/RegisterView.js":"45"},{"size":320,"mtime":1611989793455,"results":"46","hashOfConfig":"47"},{"size":511,"mtime":1611989306605,"results":"48","hashOfConfig":"47"},{"size":672,"mtime":1611985152464,"results":"49","hashOfConfig":"47"},{"size":1106,"mtime":1617012296783,"results":"50","hashOfConfig":"47"},{"size":551,"mtime":1611985042513,"results":"51","hashOfConfig":"47"},{"size":544,"mtime":1611985042512,"results":"52","hashOfConfig":"47"},{"size":1618,"mtime":1611985042514,"results":"53","hashOfConfig":"47"},{"size":1343,"mtime":1611986708738,"results":"54","hashOfConfig":"47"},{"size":1763,"mtime":1612063764494,"results":"55","hashOfConfig":"47"},{"size":4155,"mtime":1616052697196,"results":"56","hashOfConfig":"47"},{"size":1637,"mtime":1611986708737,"results":"57","hashOfConfig":"47"},{"size":1549,"mtime":1611988298582,"results":"58","hashOfConfig":"47"},{"size":1001,"mtime":1611986708741,"results":"59","hashOfConfig":"47"},{"size":760,"mtime":1612063638164,"results":"60","hashOfConfig":"47"},{"size":174,"mtime":1611985152463,"results":"61","hashOfConfig":"47"},{"size":462,"mtime":1611985152462,"results":"62","hashOfConfig":"47"},{"size":820,"mtime":1611986714703,"results":"63","hashOfConfig":"47"},{"size":1566,"mtime":1611986714702,"results":"64","hashOfConfig":"47"},{"size":139,"mtime":1611988271107,"results":"65","hashOfConfig":"47"},{"size":5586,"mtime":1611985146540,"results":"66","hashOfConfig":"47"},{"size":4953,"mtime":1611989834576,"results":"67","hashOfConfig":"47"},{"size":2850,"mtime":1616044514389,"results":"68","hashOfConfig":"47"},{"size":10076,"mtime":1616054586947,"results":"69","hashOfConfig":"47"},{"size":661,"mtime":1612334358461,"results":"70","hashOfConfig":"47"},{"size":1934,"mtime":1614782764675,"results":"71","hashOfConfig":"47"},{"size":4637,"mtime":1617020333197,"results":"72","hashOfConfig":"47"},{"size":7335,"mtime":1614181003423,"results":"73","hashOfConfig":"47"},{"size":1116,"mtime":1614776552041,"results":"74","hashOfConfig":"47"},{"size":21814,"mtime":1616054689044,"results":"75","hashOfConfig":"47"},{"size":3129,"mtime":1615735352595,"results":"76","hashOfConfig":"47"},{"size":3389,"mtime":1615819513821,"results":"77","hashOfConfig":"47"},{"size":3249,"mtime":1615730243841,"results":"78","hashOfConfig":"47"},{"size":3406,"mtime":1615730222100,"results":"79","hashOfConfig":"47"},{"size":3213,"mtime":1615730266689,"results":"80","hashOfConfig":"47"},{"size":15548,"mtime":1616054713731,"results":"81","hashOfConfig":"47"},{"size":1287,"mtime":1614783446032,"results":"82","hashOfConfig":"47"},{"size":4258,"mtime":1614782159003,"results":"83","hashOfConfig":"47"},{"size":1136,"mtime":1614778616047,"results":"84","hashOfConfig":"47"},{"size":4050,"mtime":1616041894130,"results":"85","hashOfConfig":"47"},{"size":1136,"mtime":1614778628031,"results":"86","hashOfConfig":"47"},{"size":1250,"mtime":1614788882400,"results":"87","hashOfConfig":"47"},{"size":16420,"mtime":1616054724566,"results":"88","hashOfConfig":"47"},{"size":8839,"mtime":1616054689073,"results":"89","hashOfConfig":"47"},{"size":5605,"mtime":1617012371228,"results":"90","hashOfConfig":"47"},{"size":6435,"mtime":1617012371232,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"zfweu8",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"94"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":2,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"94"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"94"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/index.js",[],["207","208"],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/App.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/components/GlobalStyles.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/routes.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/theme/index.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/theme/typography.js",["209"],"export default {\n  h1: {\n    fontWeight: 500,\n    fontSize: 35,\n    letterSpacing: '-0.24px'\n  },\n  h2: {\n    fontWeight: 500,\n    fontSize: 29,\n    letterSpacing: '-0.24px'\n  },\n  h3: {\n    fontWeight: 500,\n    fontSize: 24,\n    letterSpacing: '-0.06px'\n  },\n  h4: {\n    fontWeight: 500,\n    fontSize: 20,\n    letterSpacing: '-0.06px'\n  },\n  h5: {\n    fontWeight: 500,\n    fontSize: 16,\n    letterSpacing: '-0.05px'\n  },\n  h6: {\n    fontWeight: 500,\n    fontSize: 14,\n    letterSpacing: '-0.05px'\n  },\n  overline: {\n    fontWeight: 500\n  }\n};\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/theme/shadows.js",["210"],"export default [\n  'none',\n  '0 0 0 1px rgba(63,63,68,0.05), 0 1px 2px 0 rgba(63,63,68,0.15)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 5px 8px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 12px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)'\n];\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/DashboardLayout/index.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/DashboardLayout/TopBar.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/DashboardLayout/NavBar/index.js",["211","212","213","214","215","216","217","218","219","220","221"],"import React, { useEffect } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Divider,\n  Drawer,\n  Hidden,\n  List,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  AlertCircle as AlertCircleIcon,\n  BarChart as BarChartIcon,\n  Lock as LockIcon,\n  Settings as SettingsIcon,\n  ShoppingBag as ShoppingBagIcon,\n  User as UserIcon,\n  UserPlus as UserPlusIcon,\n  Users as UsersIcon\n} from 'react-feather';\nimport NavItem from './NavItem';\n\nconst user = {\n  avatar: '/static/images/avatars/avatar_6.png',\n  jobTitle: 'Senior Developer',\n  name: 'Katarina Smith'\n};\n\nconst items = [\n  // {\n  //   href: '/app/dashboard',\n  //   icon: BarChartIcon,\n  //   title: 'Dashboard'\n  // },\n  // {\n  //   href: '/app/customers',\n  //   icon: UsersIcon,\n  //   title: 'Customers'\n  // },\n  {\n    href: '/app/stakeholders',\n    icon: UsersIcon,\n    title: 'Building Stakeholder'\n  },\n  {\n    href: '/app/energyAuditors',\n    icon: UserIcon,\n    title: 'Energy Savings Auditors'\n  },\n  {\n    href: '/app/carbonAuditors',\n    icon: UserIcon,\n    title: 'Carbon Credit Auditors'\n  },\n  // {\n  //   href: '/app/products',\n  //   icon: ShoppingBagIcon,\n  //   title: 'Products'\n  // },\n  // {\n  //   href: '/app/account',\n  //   icon: UserIcon,\n  //   title: 'Account'\n  // },\n  // {\n  //   href: '/app/settings',\n  //   icon: SettingsIcon,\n  //   title: 'Settings'\n  // },\n  // {\n  //   href: '/login',\n  //   icon: LockIcon,\n  //   title: 'Login'\n  // },\n  // {\n  //   href: '/register',\n  //   icon: UserPlusIcon,\n  //   title: 'Register'\n  // },\n  // {\n  //   href: '/404',\n  //   icon: AlertCircleIcon,\n  //   title: 'Error'\n  // }\n];\n\nconst useStyles = makeStyles(() => ({\n  mobileDrawer: {\n    width: 256\n  },\n  desktopDrawer: {\n    width: 256,\n    top: 64,\n    height: 'calc(100% - 64px)'\n  },\n  avatar: {\n    cursor: 'pointer',\n    width: 64,\n    height: 64\n  }\n}));\n\nconst NavBar = ({ onMobileClose, openMobile }) => {\n  const classes = useStyles();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (openMobile && onMobileClose) {\n      onMobileClose();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname]);\n\n  const content = (\n    <Box\n      height=\"100%\"\n      display=\"flex\"\n      flexDirection=\"column\"\n    >\n      {/*<Box*/}\n      {/*  alignItems=\"center\"*/}\n      {/*  display=\"flex\"*/}\n      {/*  flexDirection=\"column\"*/}\n      {/*  p={2}*/}\n      {/*>*/}\n      {/*  <Avatar*/}\n      {/*    className={classes.avatar}*/}\n      {/*    component={RouterLink}*/}\n      {/*    src={user.avatar}*/}\n      {/*    to=\"/app/account\"*/}\n      {/*  />*/}\n      {/*  <Typography*/}\n      {/*    className={classes.name}*/}\n      {/*    color=\"textPrimary\"*/}\n      {/*    variant=\"h5\"*/}\n      {/*  >*/}\n      {/*    {user.name}*/}\n      {/*  </Typography>*/}\n      {/*  <Typography*/}\n      {/*    color=\"textSecondary\"*/}\n      {/*    variant=\"body2\"*/}\n      {/*  >*/}\n      {/*    {user.jobTitle}*/}\n      {/*  </Typography>*/}\n      {/*</Box>*/}\n      <Divider />\n      <Box p={2}>\n        <List>\n          {items.map((item) => (\n            <NavItem\n              href={item.href}\n              key={item.title}\n              title={item.title}\n              icon={item.icon}\n            />\n          ))}\n        </List>\n      </Box>\n      <Box flexGrow={1} />\n    </Box>\n  );\n\n  return (\n    <>\n      <Hidden lgUp>\n        <Drawer\n          anchor=\"left\"\n          classes={{ paper: classes.mobileDrawer }}\n          onClose={onMobileClose}\n          open={openMobile}\n          variant=\"temporary\"\n        >\n          {content}\n        </Drawer>\n      </Hidden>\n      <Hidden mdDown>\n        <Drawer\n          anchor=\"left\"\n          classes={{ paper: classes.desktopDrawer }}\n          open\n          variant=\"persistent\"\n        >\n          {content}\n        </Drawer>\n      </Hidden>\n    </>\n  );\n};\n\nNavBar.propTypes = {\n  onMobileClose: PropTypes.func,\n  openMobile: PropTypes.bool\n};\n\nNavBar.defaultProps = {\n  onMobileClose: () => {},\n  openMobile: false\n};\n\nexport default NavBar;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/DashboardLayout/NavBar/NavItem.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/errors/NotFoundView.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/MainLayout/index.js",[],["222","223"],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/layouts/MainLayout/TopBar.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/components/Logo.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/components/Page.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/icons/Facebook.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/icons/Google.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/utils/getInitials.js",["224"],"export default (name = '') => name\n  .replace(/\\s+/, ' ')\n  .split(' ')\n  .slice(0, 2)\n  .map((v) => v && v[0].toUpperCase())\n  .join('');\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/mixins/chartjs.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/serviceWorker.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/index.js",["225"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    makeStyles\n} from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Page from 'src/components/Page';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport axios from 'axios';\nimport BuildingInformation from './BuildingInformation';\nimport BaselineModel from './BaselineModel';\nimport Measurement from './Measurement';\nimport VerificationStatus from './VerificationStatus'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.dark,\n        minHeight: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3)\n    }\n}));\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst Stakeholders = () => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Page\n            className={classes.root}\n            title=\"Building Stakeholders\"\n        >\n            <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"Building Information\" {...a11yProps(0)} />\n                    <Tab label=\"Baseline Model\" {...a11yProps(1)} />\n                    <Tab label=\"Measurement\" {...a11yProps(2)} />\n                    <Tab label=\"Verification Status\" {...a11yProps(3)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                <BuildingInformation />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <BaselineModel />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <Measurement />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n                <VerificationStatus />\n            </TabPanel>\n        </Page>\n    );\n};\n\nexport default Stakeholders;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/BuildingInformation.js",["226"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField,\n    makeStyles\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    root: {}\n}));\n\nconst BuildingInformation = ({ className, ...rest }) => {\n    const classes = useStyles();\n    const [values, setValues] = useState({\n        buildings: [],\n        buildingID: '',\n        buildingName: '',\n        buildingNumber: '',\n        address: '',\n        substantialCompletion: '',\n        greenBuildingCertificate: ''\n    });\n\n    const handleChange = (event) => {\n        setValues({\n            ...values,\n            [event.target.name]: event.target.value\n        });\n    };\n\n    const handleSave = (event) => {\n        apiPost(values[\"buildingNumber\"], values[\"buildingName\"], values[\"buildingNumber\"], values[\"address\"], values[\"substantialCompletion\"], values[\"greenBuildingCertificate\"])\n\n    };\n\n    const apiGet = async (id) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/info/\" + id;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin' : 'http://34.236.242.165:8080',}});\n        console.log(response)\n        // await this.setState({argValue: response.data});\n    }\n\n    const apiPost = async (buildingId, buildingName, buildingNumber, buildingAddress, substantialCompletion, greenBuildingCertificate) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/info\";\n        const response = await axios.post(url, {\n            \"objectType\": \"BuildingInfo\",\n            \"id\":buildingId,\n            \"name\": buildingName,\n            \"number\": buildingNumber,\n            \"address\": buildingAddress,\n            \"substantialCompletion\":substantialCompletion,\n            \"greenBuildingCertificate\":greenBuildingCertificate\n        }, {headers: {'Access-Control-Allow-Origin' : '*','Access-Control-Allow-Headers':'*'}});\n        console.log(response.data);\n        alert(\"Successfully create building data\")\n    }\n\n\n    const selectBuilding = async (event) => {\n        var bID = event.target.value;\n        await setValues({\n            ...values,\n            buildingID: event.target.value\n        })\n\n        await getBuildingInfo(bID);\n\n    }\n\n    const getBuildingInfo = async (id) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/info/\" + id;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data)\n        setValues({\n            ...values,\n            buildingID: id,\n            buildingName: response.data.name,\n            address: response.data.address,\n            buildingNumber: response.data.number,\n            substantialCompletion: response.data.substantialCompletion,\n            greenBuildingCertificate: response.data.greenBuildingCertificate\n        })\n\n    }\n\n    const getBuilding = async () => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/list\";\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data.buildingList)\n        setValues({\n            ...values,\n            buildings: response.data.buildingList\n        })\n\n        alert(\"Successfully get building list\")\n    }\n\n\n    return (\n        <form\n            autoComplete=\"off\"\n            noValidate\n            className={clsx(classes.root, className)}\n            {...rest}\n        >\n            <Card>\n                <CardHeader\n                    subheader=\"The information can be edited\"\n                    title=\"Building Information\"\n                />\n                <Divider />\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Select Building\"\n                                name=\"buildingID\"\n                                onChange={selectBuilding}\n                                required\n                                select\n                                SelectProps={{ native: true }}\n                                value={values.buildingID}\n                                variant=\"outlined\"\n                            >\n                                {values.buildings.map((option) => (\n                                    <option\n                                        key={option.id}\n                                        value={option.id}\n                                    >\n                                        {option.name}\n                                    </option>\n                                ))}\n                            </TextField>\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <Box\n                                display=\"flex\"\n                                justifyContent=\"flex-end\"\n                                p={2}\n                            >\n                                <Button\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    onClick={getBuilding}\n                                >\n                                    Get Building\n                                </Button>\n                            </Box>\n                        </Grid>\n\n                    </Grid>\n\n\n                </CardContent>\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                helperText=\"Please specify the building name\"\n                                label=\"Building name\"\n                                name=\"buildingName\"\n                                onChange={handleChange}\n                                required\n                                value={values.buildingName}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                helperText=\"Please specify the building number\"\n                                label=\"Building Number\"\n                                name=\"buildingNumber\"\n                                onChange={handleChange}\n                                required\n                                value={values.buildingNumber}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Address\"\n                                name=\"address\"\n                                onChange={handleChange}\n                                required\n                                value={values.address}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Substantial Completion\"\n                                name=\"substantialCompletion\"\n                                onChange={handleChange}\n                                required\n                                value={values.substantialCompletion}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Green Building Certificate\"\n                                name=\"greenBuildingCertificate\"\n                                onChange={handleChange}\n                                required\n                                value={values.greenBuildingCertificate}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-end\"\n                    p={2}\n                >\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={handleSave}\n                    >\n                        Save\n                    </Button>\n                </Box>\n            </Card>\n        </form>\n    );\n};\n\nBuildingInformation.propTypes = {\n    className: PropTypes.string\n};\n\nexport default BuildingInformation;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/utils/hlfutils.js",[],["227","228"],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/index.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/index.js",["229","230"],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/CarbonAuditorsInformation.js",["231"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField,\n    makeStyles\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    root: {}\n}));\n\nconst BuildingInformation = ({ className, ...rest }) => {\n    const classes = useStyles();\n    const [values, setValues] = useState({\n        buildingID: 'Building ID',\n        buildingName: 'Building name',\n        buildingNumber: '0',\n        address: 'Building address',\n        substantialCompletion: 'Substantial completion',\n        greenBuildingCertificate: 'Green building certificate'\n    });\n\n    const handleChange = (event) => {\n        setValues({\n            ...values,\n            [event.target.name]: event.target.value\n        });\n    };\n\n    const handleSave = (event) => {\n        console.log(values[\"buildingID\"])\n        apiPost(values[\"buildingID\"], values[\"buildingName\"], values[\"buildingNumber\"], values[\"address\"], values[\"substantialCompletion\"], values[\"greenBuildingCertificate\"])\n\n    };\n\n    const apiGet = async (id) => {\n        var url = \"http://localhost:8080/api/mrv/building/info/\" + id;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin' : 'http://localhost:8080',}});\n        console.log(response)\n        // await this.setState({argValue: response.data});\n    }\n\n    const apiPost = async (buildingId, buildingName, buildingNumber, buildingAddress, substantialCompletion, greenBuildingCertificate) => {\n        var url = \"http://localhost:8080/api/mrv/building/info\";\n        const response = await axios.post(url, {\n            \"objectType\": \"BuildingInfo\",\n            \"id\":buildingId,\n            \"name\": buildingName,\n            \"number\": buildingNumber,\n            \"address\": buildingAddress,\n            \"substantialCompletion\":substantialCompletion,\n            \"greenBuildingCertificate\":greenBuildingCertificate\n        }, {headers: {'Access-Control-Allow-Origin' : '*','Access-Control-Allow-Headers':'*'}});\n        console.log(response.data);\n        // await this.setState({invokeResult: response.data.status});\n    }\n\n\n    return (\n        <form\n            autoComplete=\"off\"\n            noValidate\n            className={clsx(classes.root, className)}\n            {...rest}\n        >\n            <Card>\n                <CardHeader\n                    subheader=\"The information can be edited\"\n                    title=\"Building Information\"\n                />\n                <Divider />\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                helperText=\"Please specify the building ID\"\n                                label=\"Building ID\"\n                                name=\"buildingID\"\n                                onChange={handleChange}\n                                required\n                                value={values.buildingID}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                helperText=\"Please specify the building name\"\n                                label=\"Building name\"\n                                name=\"buildingName\"\n                                onChange={handleChange}\n                                required\n                                value={values.buildingName}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Building number\"\n                                name=\"Building Number\"\n                                onChange={handleChange}\n                                required\n                                value={values.buildingNumber}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Address\"\n                                name=\"address\"\n                                onChange={handleChange}\n                                required\n                                value={values.address}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Substantial Completion\"\n                                name=\"substantialCompletion\"\n                                onChange={handleChange}\n                                required\n                                value={values.substantialCompletion}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={12}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Green Building Certificate\"\n                                name=\"greenBuildingCertificate\"\n                                onChange={handleChange}\n                                required\n                                value={values.greenBuildingCertificate}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-end\"\n                    p={2}\n                >\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={handleSave}\n                    >\n                        Save\n                    </Button>\n                </Box>\n            </Card>\n        </form>\n    );\n};\n\nBuildingInformation.propTypes = {\n    className: PropTypes.string\n};\n\nexport default BuildingInformation;\n",["232","233"],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/EnergyAuditorsInformation.js",["234","235","236","237","238","239","240","241","242","243","244","245"],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/BaselineModel.js",["246","247","248"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField,\n    makeStyles\n} from '@material-ui/core';\n\nconst buildings = [\n    {\n        id: '',\n        name: ''\n    },\n];\n\nconst useStyles = makeStyles(() => ({\n    root: {}\n}));\n\nconst BaselineModel = ({ className, ...rest }) => {\n    const classes = useStyles();\n    const [values, setValues] = useState({\n        buildings: [{id:\"\", name:\"\"}],\n        buildingID: '',\n        electricityMMBTU: 0,\n        electricityKWH: 0,\n        naturalGasMMBTU: 0,\n        naturalGasSCF: 0,\n        chilledWaterMMBTU: 0,\n        chilledWaterKTON: 0,\n        steamMMBTU: 0,\n        steamKLBS: 0,\n        totalMMBTU: 0,\n        coalMMBTU: 0,\n        gHGNaturalGasMMBTU: 0,\n        oilMMBTU: 0,\n        coalKG: 0,\n        naturalGasKG: 0,\n        oilKG: 0,\n        totalCO2EKG: 0,\n        totalCO2ETON: 0\n\n    });\n\n    const handleChange = (event) => {\n        setValues({\n            ...values,\n            [event.target.name]: event.target.value\n\n        });\n    };\n\n    const selectBuilding = async (event) => {\n        var bID = event.target.value;\n        console.log(bID)\n        await setValues({\n            ...values,\n            buildingID: event.target.value\n        })\n\n\n        var url = \"http://34.236.242.165:8080/api/mrv/building/baseline/\" + bID;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin' : 'http://34.236.242.165:8080',}});\n        console.log(response.data)\n\n        setValues({\n            ...values,\n            buildingID: bID,\n            electricityMMBTU: response.data.electricityMMBTU,\n            electricityKWH: response.data.electricityKWH,\n            naturalGasMMBTU: response.data.naturalGasMMBTU,\n            naturalGasSCF: response.data.naturalGasSCF,\n            chilledWaterMMBTU: response.data.chilledWaterMMBTU,\n            chilledWaterKTON: response.data.chilledWaterKTON,\n            steamMMBTU: response.data.steamMMBTU,\n            steamKLBS: response.data.steamKLBS,\n            totalMMBTU: response.data.totalMMBTU,\n            coalMMBTU: response.data.coalMMBTU,\n            gHGNaturalGasMMBTU: response.data.gHGNaturalGasMMBTU,\n            oilMMBTU: response.data.oilMMBTU,\n            coalKG: response.data.coalKG,\n            naturalGasKG: response.data.naturalGasKG,\n            oilKG: response.data.oilKG,\n            totalCO2EKG: response.data.totalCO2EKG,\n            totalCO2ETON: response.data.totalCO2ETON\n        })\n\n    }\n\n    const loadData = (event) => {\n        console.log(\"loadData\")\n    };\n\n\n    const handleSave = (event) => {\n        console.log(values[\"buildingID\"])\n        console.log(values[\"electricityMMBTU\"])\n        apiPost(values[\"buildingID\"], values[\"electricityMMBTU\"], values[\"electricityKWH\"], values[\"naturalGasMMBTU\"], values[\"naturalGasSCF\"], values[\"chilledWaterMMBTU\"], values[\"chilledWaterKTON\"], values[\"steamMMBTU\"], values[\"steamKLBS\"], values[\"totalMMBTU\"], values[\"coalMMBTU\"], values[\"gHGNaturalGasMMBTU\"], values[\"oilMMBTU\"], values[\"coalKG\"], values[\"naturalGasKG\"], values[\"oilKG\"], values[\"totalCO2EKG\"], values[\"totalCO2ETON\"] )\n\n    };\n\n    const getBuilding = async () => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/list\";\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data.buildingList)\n        setValues({\n            ...values,\n            buildings: response.data.buildingList\n        })\n\n        alert(\"Successfully get building list\")\n    }\n\n    const apiGet = async (id) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/baseline/\" + id;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin' : 'http://34.236.242.165:8080',}});\n        console.log(response)\n        // await this.setState({argValue: response.data});\n    }\n\n    const apiPost = async (buildingId, electricityMMBTU, electricityKWH, naturalGasMMBTU, naturalGasSCF, chilledWaterMMBTU, chilledWaterKTON, steamMMBTU, steamKLBS, totalMMBTU, coalMMBTU, gHGNaturalGasMMBTU, oilMMBTU, coalKG, naturalGasKG, oilKG, totalCO2EKG, totalCO2ETON ) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/baseline\";\n        const response = await axios.post(url, {\n            \"objectType\": \"BuidlingModel\",\n            \"id\": buildingId,\n            \"electricityMMBTU\": electricityMMBTU,\n            \"naturalGasMMBTU\": naturalGasMMBTU,\n            \"chilledWaterMMBTU\": chilledWaterMMBTU,\n            \"steamMMBTU\": steamMMBTU,\n            \"electricityKWH\": electricityKWH,\n            \"naturalGasSCF\": naturalGasSCF,\n            \"chilledWaterKTON\": chilledWaterKTON,\n            \"steamKLBS\": steamKLBS,\n            \"totalMMBTU\": totalMMBTU,\n            \"coalMMBTU\": coalMMBTU,\n            \"gHGNaturalGasMMBTU\": gHGNaturalGasMMBTU,\n            \"oilMMBTU\": oilMMBTU,\n            \"coalKG\": oilMMBTU,\n            \"naturalGasKG\": naturalGasKG,\n            \"oilKG\": oilKG,\n            \"totalCO2EKG\": totalCO2EKG,\n            \"totalCO2ETON\": totalCO2ETON\n        }, {headers: {'Access-Control-Allow-Origin' : '*','Access-Control-Allow-Headers':'*'}});\n        console.log(response.data);\n        alert(\"Successfully create baseline model\")\n    }\n\n    return (\n        <form\n            autoComplete=\"off\"\n            noValidate\n            className={clsx(classes.root, className)}\n            {...rest}\n        >\n            <Card>\n                <CardHeader\n                    subheader=\"The information can be edited\"\n                    title=\"Baseline Energy Consumption\"\n                />\n                <Divider />\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Select Building\"\n                                name=\"buildingID\"\n                                onChange={selectBuilding}\n                                required\n                                select\n                                SelectProps={{ native: true }}\n                                value={values.buildingID}\n                                variant=\"outlined\"\n                            >\n                                {values.buildings.map((option) => (\n                                    <option\n                                        key={option.id}\n                                        value={option.id}\n                                    >\n                                        {option.name}\n                                    </option>\n                                ))}\n                            </TextField>\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <Box\n                                display=\"flex\"\n                                justifyContent=\"flex-end\"\n                                p={2}\n                            >\n                                <Button\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    onClick={getBuilding}\n                                >\n                                    Get Building\n                                </Button>\n                            </Box>\n                        </Grid>\n\n                    </Grid>\n\n\n                </CardContent>\n\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                helperText=\"Please specify the Electricity\"\n                                label=\"Electricity (MMBtu)\"\n                                name=\"electricityMMBTU\"\n                                onChange={handleChange}\n                                required\n                                value={values.electricityMMBTU}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                helperText=\"Please specify the Electricity\"\n                                label=\"Electricity (KWh)\"\n                                name=\"electricityKWH\"\n                                onChange={handleChange}\n                                required\n                                value={values.electricityKWH}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Natural Gas (MMBtu)\"\n                                name=\"naturalGasMMBTU\"\n                                onChange={handleChange}\n                                required\n                                value={values.naturalGasMMBTU}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Natural Gas (scf)\"\n                                name=\"naturalGasSCF\"\n                                onChange={handleChange}\n                                required\n                                value={values.naturalGasSCF}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Chilled Water (BBMtu)\"\n                                name=\"chilledWaterMMBTU\"\n                                onChange={handleChange}\n                                required\n                                value={values.chilledWaterMMBTU}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Chilled Water (Kton)\"\n                                name=\"chilledWaterKTON\"\n                                onChange={handleChange}\n                                required\n                                value={values.chilledWaterKTON}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Steam (BBMtu)\"\n                                name=\"steamMMBTU\"\n                                onChange={handleChange}\n                                required\n                                value={values.steamMMBTU}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Steam (klbs)\"\n                                name=\"steamKLBS\"\n                                onChange={handleChange}\n                                required\n                                value={values.steamKLBS}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Total (MMBtu)\"\n                                name=\"totalMMBTU\"\n                                onChange={handleChange}\n                                required\n                                value={values.totalMMBTU}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <CardHeader\n                    subheader=\"The information can be edited\"\n                    title=\"GHG Source from Baseline Energy Consumption\"\n                />\n                <Divider />\n                <CardContent>\n                    <Grid\n                    container\n                    spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Coal (MMBtu)\"\n                                name=\"coalMMBTU\"\n                                onChange={handleChange}\n                                required\n                                value={values.coalMMBTU}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Natural Gas (MMBtu)\"\n                                name=\"gHGNaturalGasMMBTU\"\n                                onChange={handleChange}\n                                required\n                                value={values.gHGNaturalGasMMBTU}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Oil (MMBtu)\"\n                                name=\"oilMMBTU\"\n                                onChange={handleChange}\n                                required\n                                value={values.oilMMBTU}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <CardHeader\n                    subheader=\"The information can be edited\"\n                    title=\"GHG emissions\"\n                />\n                <Divider />\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Coal (kg)\"\n                                name=\"coalKG\"\n                                onChange={handleChange}\n                                required\n                                value={values.coalKG}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Natural Gas (kg)\"\n                                name=\"naturalGasKG\"\n                                onChange={handleChange}\n                                required\n                                value={values.naturalGasKG}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Oil (kg)\"\n                                name=\"oilKG\"\n                                onChange={handleChange}\n                                required\n                                value={values.oilKG}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Total (Co2e, kg)\"\n                                name=\"totalCO2EKG\"\n                                onChange={handleChange}\n                                required\n                                value={values.totalCO2EKG}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Total (Co2e, Tons)\"\n                                name=\"totalCO2ETON\"\n                                onChange={handleChange}\n                                required\n                                value={values.totalCO2ETON}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-end\"\n                    p={2}\n                >\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={handleSave}\n                    >\n                        Save\n                    </Button>\n                </Box>\n            </Card>\n        </form>\n    );\n};\n\nBaselineModel.propTypes = {\n    className: PropTypes.string\n};\n\n\nexport default BaselineModel;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/Measurement.js",["249","250","251","252","253","254","255","256","257","258"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Box, Button, Card, CardContent, CardHeader, Divider, Grid,\n    makeStyles, TextField\n} from '@material-ui/core';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Page from \"../../../components/Page\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ElectricityMain from \"./ElectricityMain\";\nimport NaturalGasMain from \"./NaturalGasMain\";\nimport ChilledWaterMain from \"./ChilledWaterMain\";\nimport SteamMain from \"./SteamMain\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.dark,\n        minHeight: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3)\n    }\n}));\n\nfunction TabPanel2(props) {\n    const { children, value, index, buildingID ,...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel2.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps2(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst Measurement = () => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n    const [vals, setVals] = useState({\n        tabValue: 0,\n        buildingID: '',\n        buildings: []\n    });\n\n    const handleChange = (event, newValue) => {\n        setVals(\n            {\n                ...vals,\n                tabValue: newValue\n            }\n        )\n    };\n\n\n\n    return (\n        <Page\n            className={classes.root}\n            title=\"Measurement\"\n        >\n            <AppBar position=\"static\">\n                <Tabs value={vals.tabValue} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"1. Electricity\" {...a11yProps2(0)} />\n                    <Tab label=\"2. Natural Gas\" {...a11yProps2(1)} />\n                    <Tab label=\"3. Chilled Water\" {...a11yProps2(2)} />\n                    <Tab label=\"4. Steam\" {...a11yProps2(3)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel2 value={vals.tabValue} index={0}>\n                <ElectricityMain />\n            </TabPanel2>\n            <TabPanel2 value={vals.tabValue} index={1}>\n                <NaturalGasMain />\n            </TabPanel2>\n            <TabPanel2 value={vals.tabValue} index={2}>\n                <ChilledWaterMain />\n            </TabPanel2>\n            <TabPanel2 value={vals.tabValue} index={3}>\n                <SteamMain />\n            </TabPanel2>\n        </Page>\n\n    );\n};\n\nexport default Measurement;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/ElectricityMain.js",["259","260","261","262","263"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Box, Button, Card, CardContent, CardHeader, Divider, Grid,\n    makeStyles, TextField\n} from '@material-ui/core';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Page from \"../../../components/Page\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Data from \"./ElectricityData\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.dark,\n        minHeight: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3)\n    }\n}));\n\nfunction ElectricityTabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nElectricityTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps2(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst Measurement = (buildingID) => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Page\n            className={classes.root}\n            title=\"ElectricityMain\"\n        >\n            <Card>\n                <CardHeader\n                    title=\"Electricity\"\n                />\n                <Divider />\n            </Card>\n            <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"First Year\" {...a11yProps2(0)} />\n                    <Tab label=\"Second Year\" {...a11yProps2(1)} />\n                    <Tab label=\"Third Year\" {...a11yProps2(2)} />\n                    <Tab label=\"Fourth Year\" {...a11yProps2(3)} />\n                    <Tab label=\"Fifth Year\" {...a11yProps2(4)} />\n                </Tabs>\n            </AppBar>\n            <ElectricityTabPanel value={value} index={0}>\n                <Data year=\"First\" type=\"electricity\" buildingID={buildingID} />\n            </ElectricityTabPanel>\n            <ElectricityTabPanel value={value} index={1}>\n                <Data year=\"Second\" type=\"electricity\" buildingID={buildingID} />\n            </ElectricityTabPanel>\n            <ElectricityTabPanel value={value} index={2}>\n                <Data year=\"Third\" type=\"electricity\" buildingID={buildingID} />\n            </ElectricityTabPanel>\n            <ElectricityTabPanel value={value} index={3}>\n                <Data year=\"Fourth\" type=\"electricity\" buildingID={buildingID} />\n            </ElectricityTabPanel>\n            <ElectricityTabPanel value={value} index={4}>\n                <Data year=\"Fifth\" type=\"electricity\" buildingID={buildingID} />\n            </ElectricityTabPanel>\n        </Page>\n\n    );\n};\n\nexport default Measurement;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/NaturalGasMain.js",["264","265"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Box, Card, CardHeader, Divider,\n    makeStyles\n} from '@material-ui/core';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Page from \"../../../components/Page\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DataPage from \"./Data\";\nimport Data from \"./Data\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.dark,\n        minHeight: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3)\n    }\n}));\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst Measurement = (buildingID) => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Page\n            className={classes.root}\n            title=\"NaturalGasMain\"\n        >\n            <Card>\n                <CardHeader\n                    title=\"Natural Gas\"\n                />\n                <Divider />\n            </Card>\n            <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"First Year\" {...a11yProps(0)} />\n                    <Tab label=\"Second Year\" {...a11yProps(1)} />\n                    <Tab label=\"Third Year\" {...a11yProps(2)} />\n                    <Tab label=\"Fourth Year\" {...a11yProps(3)} />\n                    <Tab label=\"Fifth Year\" {...a11yProps(4)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                <DataPage year=\"First\" type=\"naturalGas\" buildingID={buildingID}  />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <DataPage year=\"Second\" type=\"naturalGas\" buildingID={buildingID}  />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <DataPage year=\"Third\" type=\"naturalGas\" buildingID={buildingID}  />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n                <DataPage year=\"Fourth\" type=\"naturalGas\" buildingID={buildingID}  />\n            </TabPanel>\n            <TabPanel value={value} index={4}>\n                <DataPage year=\"Fifth\" type=\"naturalGas\" buildingID={buildingID} />\n            </TabPanel>\n        </Page>\n\n    );\n};\n\nexport default Measurement;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/ChilledWaterMain.js",["266","267"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Box, Card, CardHeader, Divider,\n    makeStyles\n} from '@material-ui/core';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Page from \"../../../components/Page\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DataPage from \"./Data\";\nimport Data from \"./Data\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.dark,\n        minHeight: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3)\n    }\n}));\n\nfunction ChilledWaterTabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nChilledWaterTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst Measurement = (buildingID) => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n\n        <Page\n            className={classes.root}\n            title=\"ChilledWaterMain\"\n        >\n            <Card>\n                <CardHeader\n                    title=\"Chilled Water\"\n                />\n                <Divider />\n            </Card>\n            <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"First Year\" {...a11yProps(0)} />\n                    <Tab label=\"Second Year\" {...a11yProps(1)} />\n                    <Tab label=\"Third Year\" {...a11yProps(2)} />\n                    <Tab label=\"Fourth Year\" {...a11yProps(3)} />\n                    <Tab label=\"Fifth Year\" {...a11yProps(4)} />\n                </Tabs>\n            </AppBar>\n            <ChilledWaterTabPanel value={value} index={0}>\n                <DataPage year=\"First\" type=\"chilledWater\" buildingID={buildingID} />\n            </ChilledWaterTabPanel>\n            <ChilledWaterTabPanel value={value} index={1}>\n                <DataPage year=\"Second\" type=\"chilledWater\" buildingID={buildingID} />\n            </ChilledWaterTabPanel>\n            <ChilledWaterTabPanel value={value} index={2}>\n                <DataPage year=\"Third\" type=\"chilledWater\" buildingID={buildingID}  />\n            </ChilledWaterTabPanel>\n            <ChilledWaterTabPanel value={value} index={3}>\n                <DataPage year=\"Fourth\" type=\"chilledWater\" buildingID={buildingID} />\n            </ChilledWaterTabPanel>\n            <ChilledWaterTabPanel value={value} index={4}>\n                <DataPage year=\"Fifth\" type=\"chilledWater\" buildingID={buildingID}  />\n            </ChilledWaterTabPanel>\n        </Page>\n\n    );\n};\n\nexport default Measurement;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/SteamMain.js",["268","269"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Box, Card, CardHeader, Divider,\n    makeStyles\n} from '@material-ui/core';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Page from \"../../../components/Page\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DataPage from \"./Data\";\nimport Data from \"./Data\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.dark,\n        minHeight: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3)\n    }\n}));\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst Measurement = (buildingID) => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Page\n            className={classes.root}\n            title=\"SteamMain\"\n        >\n            <Card>\n                <CardHeader\n                    title=\"Steam\"\n                />\n                <Divider />\n            </Card>\n            <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"First Year\" {...a11yProps(0)} />\n                    <Tab label=\"Second Year\" {...a11yProps(1)} />\n                    <Tab label=\"Third Year\" {...a11yProps(2)} />\n                    <Tab label=\"Fourth Year\" {...a11yProps(3)} />\n                    <Tab label=\"Fifth Year\" {...a11yProps(4)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                <DataPage year=\"First\" type=\"steam\" buildingID={buildingID} />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <DataPage year=\"Second\" type=\"steam\" buildingID={buildingID}  />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <DataPage year=\"Third\" type=\"steam\" buildingID={buildingID}  />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n                <DataPage year=\"Fourth\" type=\"steam\" buildingID={buildingID}  />\n            </TabPanel>\n            <TabPanel value={value} index={4}>\n                <DataPage year=\"Fifth\" type=\"steam\" buildingID={buildingID}  />\n            </TabPanel>\n        </Page>\n\n    );\n};\n\nexport default Measurement;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/Data.js",["270","271"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField,\n    makeStyles\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    root: {}\n}));\n\nconst DataPage = ({ className, year, type,  ...rest }) => {\n    const classes = useStyles();\n    const yearName = year + \" Year\";\n    const [values, setValues] = useState({\n        unit: '',\n        buildingID: '',\n        buildings: [],\n        jan: 0,\n        feb: 0,\n        mar: 0,\n        apr: 0,\n        may: 0,\n        jun: 0,\n        jul: 0,\n        aug: 0,\n        sep: 0,\n        oct: 0,\n        nov: 0,\n        dec: 0\n    });\n\n    const handleChange = (event) => {\n        setValues({\n            ...values,\n            [event.target.name]: event.target.value\n        });\n    };\n\n    const handleSave = (event) => {\n        apiPost(values[\"buildingID\"], values[\"unit\"], year, type, values[\"jan\"], values[\"feb\"], values[\"mar\"], values[\"apr\"], values[\"may\"], values[\"jun\"], values[\"jul\"], values[\"aug\"], values[\"sep\"], values[\"oct\"], values[\"nov\"], values[\"dec\"])\n\n    };\n\n    const selectUnit = (event) => {\n        setValues({\n            ...values,\n            unit: event.target.value\n        })\n    }\n\n    const selectBuilding = async (event) => {\n        var bID = event.target.value;\n        setValues({\n            ...values,\n            buildingID: event.target.value\n        })\n\n        var url = \"http://34.236.242.165:8080/api/mrv/\" + bID + \"-\" + type + \"-\" + year;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data)\n        setValues({\n            ...values,\n            buildingID: bID,\n            jan: response.data.jan,\n            feb: response.data.feb,\n            mar: response.data.mar,\n            apr: response.data.apr,\n            may: response.data.may,\n            jun: response.data.jun,\n            jul: response.data.jul,\n            aug: response.data.aug,\n            sep: response.data.sep,\n            oct: response.data.oct,\n            nov: response.data.nov,\n            dec: response.data.dec\n        })\n    }\n\n    const getBuilding = async () => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/list\";\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data.buildingList)\n        setValues({\n            ...values,\n            buildings: response.data.buildingList\n        })\n\n        alert(\"Successfully get building list\")\n    }\n\n    const apiGet = async (id) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/info/\" + id;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin' : 'http://34.236.242.165:8080',}});\n        console.log(response)\n    }\n\n    const apiPost = async (buildingId, unit, year, type, jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/transient\";\n        const response = await axios.post(url, {\n            \"objectType\": \"MrvData\",\n            \"id\":buildingId,\n            \"unit\": unit,\n            \"year\": year,\n            \"energyType\": type,\n            \"jan\": jan,\n            \"feb\": feb,\n            \"mar\": mar,\n            \"apr\": apr,\n            \"may\": may,\n            \"jun\": jun,\n            \"jul\": jul,\n            \"aug\": aug,\n            \"sep\": sep,\n            \"oct\": oct,\n            \"nov\": nov,\n            \"dec\": dec\n        }, {headers: {'Access-Control-Allow-Origin' : '*','Access-Control-Allow-Headers':'*'}});\n        console.log(response.data);\n    }\n\n\n    return (\n        <form\n            autoComplete=\"off\"\n            noValidate\n            className={clsx(classes.root, className)}\n            {...rest}\n        >\n            <Card>\n                <CardHeader\n                    title={yearName}\n                />\n                <Divider />\n                <Card>\n                    <CardHeader\n                        title=\"Select Building\"\n                    />\n                    <CardContent>\n                        <Grid\n                            container\n                            spacing={3}\n                        >\n                            <Grid\n                                item\n                                md={6}\n                                xs={12}\n                            >\n                                <TextField\n                                    fullWidth\n                                    label=\"Select Building\"\n                                    name=\"buildingID\"\n                                    onChange={selectBuilding}\n                                    required\n                                    select\n                                    SelectProps={{ native: true }}\n                                    value={values.buildingID}\n                                    variant=\"outlined\"\n                                >\n                                    {values.buildings.map((option) => (\n                                        <option\n                                            key={option.id}\n                                            value={option.id}\n                                        >\n                                            {option.name}\n                                        </option>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid\n                                item\n                                md={6}\n                                xs={12}\n                            >\n                                <Box\n                                    display=\"flex\"\n                                    justifyContent=\"flex-end\"\n                                    p={2}\n                                >\n                                    <Button\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        onClick={getBuilding}\n                                    >\n                                        Get Building\n                                    </Button>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </Card>\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Jun\"\n                                name=\"jun\"\n                                onChange={handleChange}\n                                required\n                                value={values.jun}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Dec\"\n                                name=\"dec\"\n                                onChange={handleChange}\n                                required\n                                value={values.dec}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Jul\"\n                                name=\"jul\"\n                                onChange={handleChange}\n                                required\n                                value={values.jul}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Jan\"\n                                name=\"jan\"\n                                onChange={handleChange}\n                                required\n                                value={values.jan}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Aug\"\n                                name=\"aug\"\n                                onChange={handleChange}\n                                required\n                                value={values.aug}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Feb\"\n                                name=\"feb\"\n                                onChange={handleChange}\n                                required\n                                value={values.feb}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Sep\"\n                                name=\"sep\"\n                                onChange={handleChange}\n                                required\n                                value={values.sep}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Mar\"\n                                name=\"mar\"\n                                onChange={handleChange}\n                                required\n                                value={values.mar}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Oct\"\n                                name=\"oct\"\n                                onChange={handleChange}\n                                required\n                                value={values.oct}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Apr\"\n                                name=\"apr\"\n                                onChange={handleChange}\n                                required\n                                value={values.apr}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Nov\"\n                                name=\"nov\"\n                                onChange={handleChange}\n                                required\n                                value={values.nov}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"May\"\n                                name=\"may\"\n                                onChange={handleChange}\n                                required\n                                value={values.may}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-end\"\n                    p={2}\n                >\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={handleSave}\n                    >\n                        Save\n                    </Button>\n                </Box>\n            </Card>\n        </form>\n    );\n};\n\nDataPage.propTypes = {\n    className: PropTypes.string\n};\n\nexport default DataPage;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/data.js",["272"],"import { v4 as uuid } from 'uuid';\n\nexport default [\n  {\n    id: uuid(),\n    item: 'Baseline (MMBtu)',\n    electricity: '10,011.10',\n    naturalGas: '85.80',\n    chilledWater: '',\n    steam: '',\n    energySaving: ''\n  },\n  {\n    id: uuid(),\n    item: 'First Year (MMBtu)',\n    electricity: '6,294.00',\n    naturalGas: '477.00',\n    chilledWater: '2,607.00',\n    steam: '',\n    energySaving: ''\n  },\n  {\n    id: uuid(),\n    item: 'Second Year (MMBtu)',\n    electricity: '6,391.00',\n    naturalGas: '305.00',\n    chilledWater: '2,253.00',\n    steam: '',\n    energySaving: ''\n  },\n  {\n    id: uuid(),\n    item: 'Third Year (MMBtu)',\n    electricity: '6,788.00',\n    naturalGas: '402.00',\n    chilledWater: '2,837.00',\n    steam: '',\n    energySaving: ''\n  },\n  {\n    id: uuid(),\n    item: 'Fourth Year (MMBtu)',\n    electricity: '6,735.00',\n    naturalGas: '955.00',\n    chilledWater: '2,896.00',\n    steam: '',\n    energySaving: ''\n  },\n  {\n    id: uuid(),\n    item: 'Fifth Year (MMBtu)',\n    electricity: '6,587.00',\n    naturalGas: '1,011',\n    chilledWater: '2,794.00',\n    steam: '',\n    energySaving: ''\n  },\n  {\n    id: uuid(),\n    item: 'Total Savings',\n    electricity: '32,795.00',\n    naturalGas: '3150',\n    chilledWater: '13,387.00',\n    steam: '',\n    energySaving: ''\n  }\n];\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/Results.js",["273","274","275","276","277","278","279"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Card,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport getInitials from '../../../utils/getInitials';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst Results = ({ className, customers, ...rest }) => {\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectAll = (event) => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = customers.map((customer) => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        selectedCustomerIds.slice(0, selectedIndex),\n        selectedCustomerIds.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <PerfectScrollbar>\n        <Box minWidth={1050}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                    Item\n                </TableCell>\n                <TableCell>\n                    Electricity\n                </TableCell>\n                <TableCell>\n                    Natural Gas\n                </TableCell>\n                <TableCell>\n                    Chilled Water\n                </TableCell>\n                <TableCell>\n                    Steam\n                </TableCell>\n                <TableCell>\n                    Energy Savings\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {customers.slice(0, limit).map((customer) => (\n                <TableRow\n                  hover\n                  key={customer.id}\n                  selected={selectedCustomerIds.indexOf(customer.id) !== -1}\n                >\n                  <TableCell>\n                    {customer.item}\n                  </TableCell>\n                  <TableCell>\n                    {customer.electricity}\n                  </TableCell>\n                  <TableCell>\n                    {customer.naturalGas}\n                  </TableCell>\n                  <TableCell>\n                    {customer.chilledWater}\n                  </TableCell>\n                  <TableCell>\n                    {customer.steam}\n                  </TableCell>\n                  <TableCell>\n                    {customer.energySaving}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={customers.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array.isRequired\n};\n\nexport default Results;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/energyAuditors/EnergyAuditorsView/Toolbar.js",["280","281","282","283","284","285"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  TextField,\n  InputAdornment,\n  SvgIcon,\n  makeStyles\n} from '@material-ui/core';\nimport { Search as SearchIcon } from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst Toolbar = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Box\n        display=\"flex\"\n        justifyContent=\"flex-end\"\n      >\n        <Button color=\"primary\" variant=\"contained\" spacing={3}>\n          Building Information\n        </Button>\n        <Button color=\"primary\" variant=\"contained\">\n          Raw Data Fetching\n        </Button>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Verify\n        </Button>\n      </Box>\n    </div>\n  );\n};\n\nToolbar.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Toolbar;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/Results.js",["286","287","288","289","290","291","292"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Card,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport getInitials from '../../../utils/getInitials';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst Results = ({ className, customers, ...rest }) => {\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectAll = (event) => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = customers.map((customer) => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        selectedCustomerIds.slice(0, selectedIndex),\n        selectedCustomerIds.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <PerfectScrollbar>\n        <Box minWidth={1050}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                    Item\n                </TableCell>\n                <TableCell>\n                    Coal\n                </TableCell>\n                <TableCell>\n                    Natural Gas\n                </TableCell>\n                <TableCell>\n                    Oil\n                </TableCell>\n                <TableCell>\n                    CO2 Emission Reductions (Ton)\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {customers.slice(0, limit).map((customer) => (\n                <TableRow\n                  hover\n                  key={customer.id}\n                  selected={selectedCustomerIds.indexOf(customer.id) !== -1}\n                >\n                  <TableCell>\n                    {customer.item}\n                  </TableCell>\n                  <TableCell>\n                    {customer.coal}\n                  </TableCell>\n                  <TableCell>\n                    {customer.naturalGas}\n                  </TableCell>\n                  <TableCell>\n                    {customer.oil}\n                  </TableCell>\n                  <TableCell>\n                    {customer.ghg}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={customers.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array.isRequired\n};\n\nexport default Results;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/Toolbar.js",["293","294","295","296","297","298"],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/carbonAuditors/CarbonAuditorsView/data.js",["299"],"import { v4 as uuid } from 'uuid';\n\nexport default [\n  {\n    id: uuid(),\n    item: 'Baseline (kg)',\n    coal: '2,528,804.51',\n    naturalGas: '312,277.27',\n    oil: '81,076.64',\n    ghg: ''\n  },\n  {\n    id: uuid(),\n    item: 'First Year (kg)',\n    coal: '2,215,567.80',\n    naturalGas: '269,558.73',\n    oil: '71,057.31',\n    ghg: '365.97'\n  },\n  {\n    id: uuid(),\n    item: 'Second Year (kg)',\n    coal: '2,116,245.06',\n    naturalGas: '257,472.95',\n    oil: '67,869.72',\n    ghg: '480.57'\n  },\n  {\n    id: uuid(),\n    item: 'Third Year (kg)',\n    coal: '2,420,550.01',\n    naturalGas: '294,497.96',\n    oil: '77,631.36',\n    ghg: '129.48'\n  },\n  {\n    id: uuid(),\n    item: 'Fourth Year (kg)',\n    coal: '2,428,595.06',\n    naturalGas: '295,477.11',\n    oil: '77,889.84',\n    ghg: '120.20'\n  },\n  {\n    id: uuid(),\n    item: 'Fifth Year (kg)',\n    coal: '2,354,554.64',\n    naturalGas: '286,468.81',\n    oil: '75,515.07',\n    ghg: '205.62',\n  },\n  {\n    id: uuid(),\n    item: 'Total Savings (kg)',\n    coal: '11,535,512.57',\n    naturalGas: '1,403,475.56',\n    oil: '369,963.30',\n    ghg: ''\n  },\n  {\n    id: uuid(),\n    item: 'Total Savings (Tons)',\n    coal: '11,535.51',\n    naturalGas: '1,403.48',\n    oil: '369.96',\n    ghg: '1,301.84'\n  }\n];\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/ElectricityData.js",["300","301"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField,\n    makeStyles\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    root: {}\n}));\n\nconst ElectricityDataPage = ({ className, year, type,  ...rest }) => {\n    const classes = useStyles();\n    const yearName = year + \" Year\";\n    const [values, setValues] = useState({\n        pv: 0,\n        buildingID: '',\n        buildings: [],\n        jan: 0,\n        feb: 0,\n        mar: 0,\n        apr: 0,\n        may: 0,\n        jun: 0,\n        jul: 0,\n        aug: 0,\n        sep: 0,\n        oct: 0,\n        nov: 0,\n        dec: 0\n    });\n\n    const handleChange = (event) => {\n        setValues({\n            ...values,\n            [event.target.name]: event.target.value\n        });\n    };\n\n    const handleSave = (event) => {\n        apiPost(values[\"buildingID\"], values[\"unit\"], year, type, values[\"jan\"], values[\"feb\"], values[\"mar\"], values[\"apr\"], values[\"may\"], values[\"jun\"], values[\"jul\"], values[\"aug\"], values[\"sep\"], values[\"oct\"], values[\"nov\"], values[\"dec\"], values[\"pv\"])\n\n    };\n\n    const selectUnit = (event) => {\n        setValues({\n            ...values,\n            unit: event.target.value\n        })\n    }\n\n    const selectBuilding = async (event) => {\n        var bID = event.target.value\n        setValues({\n            ...values,\n            buildingID: event.target.value\n        })\n        var url = \"http://34.236.242.165:8080/api/mrv/\" + bID + \"-\" + type + \"-\" + year;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data)\n        setValues({\n            ...values,\n            buildingID: bID,\n            pv: response.data.pv,\n            jan: response.data.jan,\n            feb: response.data.feb,\n            mar: response.data.mar,\n            apr: response.data.apr,\n            may: response.data.may,\n            jun: response.data.jun,\n            jul: response.data.jul,\n            aug: response.data.aug,\n            sep: response.data.sep,\n            oct: response.data.oct,\n            nov: response.data.nov,\n            dec: response.data.dec\n        })\n    }\n\n    const getBuilding = async () => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/list\";\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data.buildingList)\n        setValues({\n            ...values,\n            buildings: response.data.buildingList\n        })\n\n        alert(\"Successfully get building list\")\n    }\n\n    const apiGet = async (id) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/info/\" + id;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin' : 'http://34.236.242.165:8080',}});\n        console.log(response)\n    }\n\n    const apiPost = async (buildingId, unit, year, type, jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec, pv) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/transient\";\n        const response = await axios.post(url, {\n            \"objectType\": \"MrvData\",\n            \"id\":buildingId,\n            \"unit\": unit,\n            \"year\": year,\n            \"energyType\": type,\n            \"jan\": jan,\n            \"feb\": feb,\n            \"mar\": mar,\n            \"apr\": apr,\n            \"may\": may,\n            \"jun\": jun,\n            \"jul\": jul,\n            \"aug\": aug,\n            \"sep\": sep,\n            \"oct\": oct,\n            \"nov\": nov,\n            \"dec\": dec,\n            \"pv\": pv\n        }, {headers: {'Access-Control-Allow-Origin' : '*','Access-Control-Allow-Headers':'*'}});\n        console.log(response.data);\n    }\n\n\n    return (\n        <form\n            autoComplete=\"off\"\n            noValidate\n            className={clsx(classes.root, className)}\n            {...rest}\n        >\n            <Card>\n                <CardHeader\n                    title={yearName}\n                />\n                <Divider />\n                <Card>\n                    <CardHeader\n                        title=\"Select Building\"\n                    />\n                    <CardContent>\n                        <Grid\n                            container\n                            spacing={3}\n                        >\n                            <Grid\n                                item\n                                md={6}\n                                xs={12}\n                            >\n                                <TextField\n                                    fullWidth\n                                    label=\"Select Building\"\n                                    name=\"buildingID\"\n                                    onChange={selectBuilding}\n                                    required\n                                    select\n                                    SelectProps={{ native: true }}\n                                    value={values.buildingID}\n                                    variant=\"outlined\"\n                                >\n                                    {values.buildings.map((option) => (\n                                        <option\n                                            key={option.id}\n                                            value={option.id}\n                                        >\n                                            {option.name}\n                                        </option>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid\n                                item\n                                md={6}\n                                xs={12}\n                            >\n                                <Box\n                                    display=\"flex\"\n                                    justifyContent=\"flex-end\"\n                                    p={2}\n                                >\n                                    <Button\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        onClick={getBuilding}\n                                    >\n                                        Get Building\n                                    </Button>\n                                </Box>\n                            </Grid>\n                            <Grid\n                                item\n                                md={6}\n                                xs={12}\n                            >\n                                <TextField\n                                    fullWidth\n                                    label=\"PV generation on-site (kWh)\"\n                                    name=\"pv\"\n                                    onChange={handleChange}\n                                    required\n                                    value={values.pv}\n                                    variant=\"outlined\"\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </Card>\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Jun\"\n                                name=\"jun\"\n                                onChange={handleChange}\n                                required\n                                value={values.jun}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Dec\"\n                                name=\"dec\"\n                                onChange={handleChange}\n                                required\n                                value={values.dec}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Jul\"\n                                name=\"jul\"\n                                onChange={handleChange}\n                                required\n                                value={values.jul}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Jan\"\n                                name=\"jan\"\n                                onChange={handleChange}\n                                required\n                                value={values.jan}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Aug\"\n                                name=\"aug\"\n                                onChange={handleChange}\n                                required\n                                value={values.aug}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Feb\"\n                                name=\"feb\"\n                                onChange={handleChange}\n                                required\n                                value={values.feb}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Sep\"\n                                name=\"sep\"\n                                onChange={handleChange}\n                                required\n                                value={values.sep}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Mar\"\n                                name=\"mar\"\n                                onChange={handleChange}\n                                required\n                                value={values.mar}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Oct\"\n                                name=\"oct\"\n                                onChange={handleChange}\n                                required\n                                value={values.oct}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Apr\"\n                                name=\"apr\"\n                                onChange={handleChange}\n                                required\n                                value={values.apr}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"Nov\"\n                                name=\"nov\"\n                                onChange={handleChange}\n                                required\n                                value={values.nov}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                        <Grid\n                            item\n                            md={6}\n                            xs={12}\n                        >\n                            <TextField\n                                fullWidth\n                                label=\"May\"\n                                name=\"may\"\n                                onChange={handleChange}\n                                required\n                                value={values.may}\n                                variant=\"outlined\"\n                                type=\"number\"\n                                step=\"0.01\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"flex-end\"\n                    p={2}\n                >\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={handleSave}\n                    >\n                        Save\n                    </Button>\n                </Box>\n            </Card>\n        </form>\n    );\n};\n\nElectricityDataPage.propTypes = {\n    className: PropTypes.string\n};\n\nexport default ElectricityDataPage;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/stakeholders/StakeHoldersView/VerificationStatus.js",["302","303","304","305","306","307","308","309"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Grid,\n    TextField,\n    makeStyles, Avatar, Typography, Checkbox\n} from '@material-ui/core';\nimport getInitials from \"../../../utils/getInitials\";\n\nconst useStyles = makeStyles(() => ({\n    root: {}\n}));\n\nconst VerficationStatus = ({ className, ...rest }) => {\n    const classes = useStyles();\n    const [values, setValues] = useState({\n        buildings: [],\n        buildingID: '',\n        buildingName: '',\n        buildingNumber: '',\n        address: '',\n        substantialCompletion: '',\n        greenBuildingCertificate: ''\n    });\n\n    const handleChange = (event) => {\n        setValues({\n            ...values,\n            [event.target.name]: event.target.value\n        });\n    };\n\n    const handleSave = (event) => {\n        apiPost(values[\"buildingNumber\"], values[\"buildingName\"], values[\"buildingNumber\"], values[\"address\"], values[\"substantialCompletion\"], values[\"greenBuildingCertificate\"])\n\n    };\n\n    const apiGet = async (id) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/info/\" + id;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin' : 'http://34.236.242.165:8080',}});\n        console.log(response)\n        // await this.setState({argValue: response.data});\n    }\n\n    const apiPost = async (buildingId, buildingName, buildingNumber, buildingAddress, substantialCompletion, greenBuildingCertificate) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/info\";\n        const response = await axios.post(url, {\n            \"objectType\": \"BuildingInfo\",\n            \"id\":buildingId,\n            \"name\": buildingName,\n            \"number\": buildingNumber,\n            \"address\": buildingAddress,\n            \"substantialCompletion\":substantialCompletion,\n            \"greenBuildingCertificate\":greenBuildingCertificate\n        }, {headers: {'Access-Control-Allow-Origin' : '*','Access-Control-Allow-Headers':'*'}});\n        console.log(response.data);\n        alert(\"Successfully create building data\")\n    }\n\n\n    const selectBuilding = async (event) => {\n        var bID = event.target.value;\n        await setValues({\n            ...values,\n            buildingID: event.target.value\n        })\n\n        await getBuildingInfo(bID);\n\n    }\n\n    const getBuildingInfo = async (id) => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/info/\" + id;\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data)\n        setValues({\n            ...values,\n            buildingID: id,\n            buildingName: response.data.name,\n            address: response.data.address,\n            buildingNumber: response.data.number,\n            substantialCompletion: response.data.substantialCompletion,\n            greenBuildingCertificate: response.data.greenBuildingCertificate\n        })\n\n    }\n\n    const getBuilding = async () => {\n        var url = \"http://34.236.242.165:8080/api/mrv/building/list\";\n        const response = await axios.get(url, {headers: {'Access-Control-Allow-Origin': 'http://34.236.242.165:8080',}})\n        console.log(response.data.buildingList)\n        setValues({\n            ...values,\n            buildings: response.data.buildingList\n        })\n\n        alert(\"Successfully get building list\")\n    }\n\n\n    return (\n        <form\n            autoComplete=\"off\"\n            noValidate\n            className={clsx(classes.root, className)}\n            {...rest}\n        >\n            <Card>\n                <CardHeader\n                    title=\"Verification Status\"\n                />\n                <Divider />\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <Box\n                                alignItems=\"center\"\n                                display=\"flex\"\n                            >\n                                <Button\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                >\n                                    Energy Savings Verification\n                                </Button>\n                            </Box>\n                        </Grid>\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <Box\n                                alignItems=\"center\"\n                                display=\"flex\"\n                            >\n                                <Typography\n                                    color=\"textPrimary\"\n                                    variant=\"body1\"\n                                >\n                                    Status\n                                </Typography>\n                            </Box>\n                        </Grid>\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <Box\n                                alignItems=\"center\"\n                                display=\"flex\"\n                            >\n                                <Checkbox\n                                    checked={1}\n                                    value=\"true\"\n                                />\n                                <Typography\n                                    color=\"textPrimary\"\n                                    variant=\"body1\"\n                                >\n                                   Completed\n                                </Typography>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <CardContent>\n                    <Grid\n                        container\n                        spacing={3}\n                    >\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <Box\n                                alignItems=\"center\"\n                                display=\"flex\"\n                            >\n                                <Button\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                >\n                                    CO2 Emission Verification\n                                </Button>\n                            </Box>\n                        </Grid>\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <Box\n                                alignItems=\"center\"\n                                display=\"flex\"\n                            >\n                                <Typography\n                                    color=\"textPrimary\"\n                                    variant=\"body1\"\n                                >\n                                    Status\n                                </Typography>\n                            </Box>\n                        </Grid>\n                        <Grid\n                            item\n                            md={4}\n                            xs={12}\n                        >\n                            <Box\n                                alignItems=\"center\"\n                                display=\"flex\"\n                            >\n                                <Checkbox\n                                    checked={1}\n                                    value=\"true\"\n                                />\n                                <Typography\n                                    color=\"textPrimary\"\n                                    variant=\"body1\"\n                                >\n                                    Completed\n                                </Typography>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n            </Card>\n        </form>\n    );\n};\n\nVerficationStatus.propTypes = {\n    className: PropTypes.string\n};\n\nexport default VerficationStatus;\n","/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/auth/LoginView.js",[],"/Users/mjkong/Dev/gowork/src/github.com/woohoon9/Blockchain_BEP_MRV/application/src/views/auth/RegisterView.js",[],{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","severity":1,"message":"315","line":1,"column":1,"nodeType":"316","endLine":35,"endColumn":3},{"ruleId":"314","severity":1,"message":"317","line":1,"column":1,"nodeType":"316","endLine":27,"endColumn":3},{"ruleId":"318","severity":1,"message":"319","line":2,"column":18,"nodeType":"320","messageId":"321","endLine":2,"endColumn":28},{"ruleId":"318","severity":1,"message":"322","line":5,"column":3,"nodeType":"320","messageId":"321","endLine":5,"endColumn":9},{"ruleId":"318","severity":1,"message":"323","line":7,"column":3,"nodeType":"320","messageId":"321","endLine":7,"endColumn":9},{"ruleId":"318","severity":1,"message":"324","line":12,"column":3,"nodeType":"320","messageId":"321","endLine":12,"endColumn":13},{"ruleId":"318","severity":1,"message":"325","line":16,"column":18,"nodeType":"320","messageId":"321","endLine":16,"endColumn":33},{"ruleId":"318","severity":1,"message":"326","line":17,"column":15,"nodeType":"320","messageId":"321","endLine":17,"endColumn":27},{"ruleId":"318","severity":1,"message":"327","line":18,"column":11,"nodeType":"320","messageId":"321","endLine":18,"endColumn":19},{"ruleId":"318","severity":1,"message":"328","line":19,"column":15,"nodeType":"320","messageId":"321","endLine":19,"endColumn":27},{"ruleId":"318","severity":1,"message":"329","line":20,"column":18,"nodeType":"320","messageId":"321","endLine":20,"endColumn":33},{"ruleId":"318","severity":1,"message":"330","line":22,"column":15,"nodeType":"320","messageId":"321","endLine":22,"endColumn":27},{"ruleId":"318","severity":1,"message":"331","line":27,"column":7,"nodeType":"320","messageId":"321","endLine":27,"endColumn":11},{"ruleId":"310","replacedBy":"332"},{"ruleId":"312","replacedBy":"333"},{"ruleId":"314","severity":1,"message":"334","line":1,"column":1,"nodeType":"316","endLine":6,"endColumn":13},{"ruleId":"318","severity":1,"message":"335","line":12,"column":8,"nodeType":"320","messageId":"321","endLine":12,"endColumn":13},{"ruleId":"318","severity":1,"message":"336","line":45,"column":11,"nodeType":"320","messageId":"321","endLine":45,"endColumn":17},{"ruleId":"310","replacedBy":"337"},{"ruleId":"312","replacedBy":"338"},{"ruleId":"318","severity":1,"message":"339","line":11,"column":8,"nodeType":"320","messageId":"321","endLine":11,"endColumn":12},{"ruleId":"318","severity":1,"message":"340","line":14,"column":9,"nodeType":"320","messageId":"321","endLine":14,"endColumn":13},{"ruleId":"318","severity":1,"message":"336","line":45,"column":11,"nodeType":"320","messageId":"321","endLine":45,"endColumn":17},{"ruleId":"310","replacedBy":"341"},{"ruleId":"312","replacedBy":"342"},{"ruleId":"318","severity":1,"message":"343","line":2,"column":8,"nodeType":"320","messageId":"321","endLine":2,"endColumn":12},{"ruleId":"318","severity":1,"message":"335","line":4,"column":8,"nodeType":"320","messageId":"321","endLine":4,"endColumn":13},{"ruleId":"318","severity":1,"message":"323","line":7,"column":5,"nodeType":"320","messageId":"321","endLine":7,"endColumn":11},{"ruleId":"318","severity":1,"message":"344","line":8,"column":5,"nodeType":"320","messageId":"321","endLine":8,"endColumn":9},{"ruleId":"318","severity":1,"message":"345","line":9,"column":5,"nodeType":"320","messageId":"321","endLine":9,"endColumn":16},{"ruleId":"318","severity":1,"message":"346","line":10,"column":5,"nodeType":"320","messageId":"321","endLine":10,"endColumn":15},{"ruleId":"318","severity":1,"message":"347","line":11,"column":5,"nodeType":"320","messageId":"321","endLine":11,"endColumn":12},{"ruleId":"318","severity":1,"message":"348","line":12,"column":5,"nodeType":"320","messageId":"321","endLine":12,"endColumn":9},{"ruleId":"318","severity":1,"message":"349","line":13,"column":5,"nodeType":"320","messageId":"321","endLine":13,"endColumn":14},{"ruleId":"318","severity":1,"message":"350","line":25,"column":7,"nodeType":"320","messageId":"321","endLine":25,"endColumn":25},{"ruleId":"351","severity":2,"message":"352","line":44,"column":1,"nodeType":"320","messageId":"353","endLine":44,"endColumn":20},{"ruleId":"351","severity":2,"message":"352","line":48,"column":16,"nodeType":"320","messageId":"353","endLine":48,"endColumn":35},{"ruleId":"318","severity":1,"message":"354","line":17,"column":7,"nodeType":"320","messageId":"321","endLine":17,"endColumn":16},{"ruleId":"318","severity":1,"message":"355","line":98,"column":11,"nodeType":"320","messageId":"321","endLine":98,"endColumn":19},{"ruleId":"318","severity":1,"message":"336","line":122,"column":11,"nodeType":"320","messageId":"321","endLine":122,"endColumn":17},{"ruleId":"318","severity":1,"message":"323","line":4,"column":10,"nodeType":"320","messageId":"321","endLine":4,"endColumn":16},{"ruleId":"318","severity":1,"message":"344","line":4,"column":18,"nodeType":"320","messageId":"321","endLine":4,"endColumn":22},{"ruleId":"318","severity":1,"message":"345","line":4,"column":24,"nodeType":"320","messageId":"321","endLine":4,"endColumn":35},{"ruleId":"318","severity":1,"message":"346","line":4,"column":37,"nodeType":"320","messageId":"321","endLine":4,"endColumn":47},{"ruleId":"318","severity":1,"message":"347","line":4,"column":49,"nodeType":"320","messageId":"321","endLine":4,"endColumn":56},{"ruleId":"318","severity":1,"message":"348","line":4,"column":58,"nodeType":"320","messageId":"321","endLine":4,"endColumn":62},{"ruleId":"318","severity":1,"message":"349","line":5,"column":17,"nodeType":"320","messageId":"321","endLine":5,"endColumn":26},{"ruleId":"318","severity":1,"message":"335","line":16,"column":8,"nodeType":"320","messageId":"321","endLine":16,"endColumn":13},{"ruleId":"318","severity":1,"message":"356","line":62,"column":12,"nodeType":"320","messageId":"321","endLine":62,"endColumn":17},{"ruleId":"318","severity":1,"message":"357","line":62,"column":19,"nodeType":"320","messageId":"321","endLine":62,"endColumn":27},{"ruleId":"318","severity":1,"message":"358","line":1,"column":17,"nodeType":"320","messageId":"321","endLine":1,"endColumn":25},{"ruleId":"318","severity":1,"message":"323","line":4,"column":10,"nodeType":"320","messageId":"321","endLine":4,"endColumn":16},{"ruleId":"318","severity":1,"message":"345","line":4,"column":24,"nodeType":"320","messageId":"321","endLine":4,"endColumn":35},{"ruleId":"318","severity":1,"message":"348","line":4,"column":58,"nodeType":"320","messageId":"321","endLine":4,"endColumn":62},{"ruleId":"318","severity":1,"message":"349","line":5,"column":17,"nodeType":"320","messageId":"321","endLine":5,"endColumn":26},{"ruleId":"318","severity":1,"message":"358","line":1,"column":17,"nodeType":"320","messageId":"321","endLine":1,"endColumn":25},{"ruleId":"318","severity":1,"message":"359","line":13,"column":8,"nodeType":"320","messageId":"321","endLine":13,"endColumn":12},{"ruleId":"318","severity":1,"message":"358","line":1,"column":17,"nodeType":"320","messageId":"321","endLine":1,"endColumn":25},{"ruleId":"318","severity":1,"message":"359","line":13,"column":8,"nodeType":"320","messageId":"321","endLine":13,"endColumn":12},{"ruleId":"318","severity":1,"message":"358","line":1,"column":17,"nodeType":"320","messageId":"321","endLine":1,"endColumn":25},{"ruleId":"318","severity":1,"message":"359","line":13,"column":8,"nodeType":"320","messageId":"321","endLine":13,"endColumn":12},{"ruleId":"318","severity":1,"message":"360","line":54,"column":11,"nodeType":"320","messageId":"321","endLine":54,"endColumn":21},{"ruleId":"318","severity":1,"message":"336","line":101,"column":11,"nodeType":"320","messageId":"321","endLine":101,"endColumn":17},{"ruleId":"314","severity":1,"message":"317","line":3,"column":1,"nodeType":"316","endLine":67,"endColumn":3},{"ruleId":"318","severity":1,"message":"361","line":4,"column":8,"nodeType":"320","messageId":"321","endLine":4,"endColumn":14},{"ruleId":"318","severity":1,"message":"322","line":7,"column":3,"nodeType":"320","messageId":"321","endLine":7,"endColumn":9},{"ruleId":"318","severity":1,"message":"362","line":10,"column":3,"nodeType":"320","messageId":"321","endLine":10,"endColumn":11},{"ruleId":"318","severity":1,"message":"324","line":17,"column":3,"nodeType":"320","messageId":"321","endLine":17,"endColumn":13},{"ruleId":"318","severity":1,"message":"363","line":20,"column":8,"nodeType":"320","messageId":"321","endLine":20,"endColumn":19},{"ruleId":"318","severity":1,"message":"364","line":35,"column":9,"nodeType":"320","messageId":"321","endLine":35,"endColumn":24},{"ruleId":"318","severity":1,"message":"365","line":47,"column":9,"nodeType":"320","messageId":"321","endLine":47,"endColumn":24},{"ruleId":"318","severity":1,"message":"344","line":7,"column":3,"nodeType":"320","messageId":"321","endLine":7,"endColumn":7},{"ruleId":"318","severity":1,"message":"345","line":8,"column":3,"nodeType":"320","messageId":"321","endLine":8,"endColumn":14},{"ruleId":"318","severity":1,"message":"349","line":9,"column":3,"nodeType":"320","messageId":"321","endLine":9,"endColumn":12},{"ruleId":"318","severity":1,"message":"366","line":10,"column":3,"nodeType":"320","messageId":"321","endLine":10,"endColumn":17},{"ruleId":"318","severity":1,"message":"367","line":11,"column":3,"nodeType":"320","messageId":"321","endLine":11,"endColumn":10},{"ruleId":"318","severity":1,"message":"368","line":14,"column":20,"nodeType":"320","messageId":"321","endLine":14,"endColumn":30},{"ruleId":"318","severity":1,"message":"361","line":4,"column":8,"nodeType":"320","messageId":"321","endLine":4,"endColumn":14},{"ruleId":"318","severity":1,"message":"322","line":7,"column":3,"nodeType":"320","messageId":"321","endLine":7,"endColumn":9},{"ruleId":"318","severity":1,"message":"362","line":10,"column":3,"nodeType":"320","messageId":"321","endLine":10,"endColumn":11},{"ruleId":"318","severity":1,"message":"324","line":17,"column":3,"nodeType":"320","messageId":"321","endLine":17,"endColumn":13},{"ruleId":"318","severity":1,"message":"363","line":20,"column":8,"nodeType":"320","messageId":"321","endLine":20,"endColumn":19},{"ruleId":"318","severity":1,"message":"364","line":35,"column":9,"nodeType":"320","messageId":"321","endLine":35,"endColumn":24},{"ruleId":"318","severity":1,"message":"365","line":47,"column":9,"nodeType":"320","messageId":"321","endLine":47,"endColumn":24},{"ruleId":"318","severity":1,"message":"344","line":7,"column":3,"nodeType":"320","messageId":"321","endLine":7,"endColumn":7},{"ruleId":"318","severity":1,"message":"345","line":8,"column":3,"nodeType":"320","messageId":"321","endLine":8,"endColumn":14},{"ruleId":"318","severity":1,"message":"349","line":9,"column":3,"nodeType":"320","messageId":"321","endLine":9,"endColumn":12},{"ruleId":"318","severity":1,"message":"366","line":10,"column":3,"nodeType":"320","messageId":"321","endLine":10,"endColumn":17},{"ruleId":"318","severity":1,"message":"367","line":11,"column":3,"nodeType":"320","messageId":"321","endLine":11,"endColumn":10},{"ruleId":"318","severity":1,"message":"368","line":14,"column":20,"nodeType":"320","messageId":"321","endLine":14,"endColumn":30},{"ruleId":"314","severity":1,"message":"317","line":3,"column":1,"nodeType":"316","endLine":68,"endColumn":3},{"ruleId":"318","severity":1,"message":"360","line":54,"column":11,"nodeType":"320","messageId":"321","endLine":54,"endColumn":21},{"ruleId":"318","severity":1,"message":"336","line":101,"column":11,"nodeType":"320","messageId":"321","endLine":101,"endColumn":17},{"ruleId":"318","severity":1,"message":"349","line":13,"column":5,"nodeType":"320","messageId":"321","endLine":13,"endColumn":14},{"ruleId":"318","severity":1,"message":"322","line":14,"column":17,"nodeType":"320","messageId":"321","endLine":14,"endColumn":23},{"ruleId":"318","severity":1,"message":"363","line":16,"column":8,"nodeType":"320","messageId":"321","endLine":16,"endColumn":19},{"ruleId":"318","severity":1,"message":"369","line":34,"column":11,"nodeType":"320","messageId":"321","endLine":34,"endColumn":23},{"ruleId":"318","severity":1,"message":"370","line":41,"column":11,"nodeType":"320","messageId":"321","endLine":41,"endColumn":21},{"ruleId":"318","severity":1,"message":"336","line":46,"column":11,"nodeType":"320","messageId":"321","endLine":46,"endColumn":17},{"ruleId":"318","severity":1,"message":"371","line":69,"column":11,"nodeType":"320","messageId":"321","endLine":69,"endColumn":25},{"ruleId":"318","severity":1,"message":"372","line":96,"column":11,"nodeType":"320","messageId":"321","endLine":96,"endColumn":22},"no-native-reassign",["373"],"no-negated-in-lhs",["374"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign array to a variable before exporting as module default","no-unused-vars","'RouterLink' is defined but never used.","Identifier","unusedVar","'Avatar' is defined but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","'AlertCircleIcon' is defined but never used.","'BarChartIcon' is defined but never used.","'LockIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'ShoppingBagIcon' is defined but never used.","'UserPlusIcon' is defined but never used.","'user' is assigned a value but never used.",["373"],["374"],"Assign arrow function to a variable before exporting as module default","'axios' is defined but never used.","'apiGet' is assigned a value but never used.",["373"],["374"],"'data' is defined but never used.","'Tool' is defined but never used.",["373"],["374"],"'clsx' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'CardHeader' is defined but never used.","'Divider' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'EnergyAuditorsView' is assigned a value but never used.","no-undef","'BuildingInformation' is not defined.","undef","'buildings' is assigned a value but never used.","'loadData' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'useState' is defined but never used.","'Data' is defined but never used.","'selectUnit' is assigned a value but never used.","'moment' is defined but never used.","'Checkbox' is defined but never used.","'getInitials' is defined but never used.","'handleSelectAll' is assigned a value but never used.","'handleSelectOne' is assigned a value but never used.","'InputAdornment' is defined but never used.","'SvgIcon' is defined but never used.","'SearchIcon' is defined but never used.","'handleChange' is assigned a value but never used.","'handleSave' is assigned a value but never used.","'selectBuilding' is assigned a value but never used.","'getBuilding' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]